# Docker Compose configuration for a multi-service web application stack
#
# Usage:
# - Ensure all .env files are properly configured in the ./env directory
# - Use `docker-compose --profile <profile_name> up -d` to start services
# - Available profiles: wp, crypt, core, darkwire, gitea
#
# Note: Replace all placeholder values before deploying
#
# Recommended order of starting services:
# 1. Core services (nginx-proxy, nginx-acme)
# 2. Databases and caches (wp-db, redis)
# 3. Application services (wp-app, privatebin, darkwire, cryptletter, tg-proxy, gitea)

services:
  #######################
  # Core Services       #
  #######################

  nginx-proxy:
    container_name: nginx-proxy
    image: nginxproxy/nginx-proxy:1.2.1
    profiles: ["core"]
    labels:
      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy"
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - certs:/etc/nginx/certs:ro
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - SETGID
      - SETUID
    networks:
      - frontend
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  nginx-acme:
    container_name: nginx-acme
    profiles: ["core"]
    image: nginxproxy/acme-companion:2.2.8
    depends_on:
      - nginx-proxy
    restart: unless-stopped
    volumes:
      - certs:/etc/nginx/certs
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    env_file:
      - ./env/nginx-acme.env
    networks:
      - frontend
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: 128M
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  #######################
  # Database Services   #
  #######################

  wp-db:
    build:
      context: ./dockerfiles/wp-db
      dockerfile: Dockerfile
    container_name: wp-db
    profiles: ["wp"]
    restart: unless-stopped
    volumes:
      - wp-db-data:/var/lib/mysql
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    environment:
      - VAULT_ADDR=http://vault:8200
    env_file:
      - ./env/wp-db.env
      - ./env/wp-app.env
      - ./env/.env.vault
    command: >
      /bin/sh -c "
        export VAULT_TOKEN=$$(vault write -field=token auth/approle/login role_id=$$WP_DB_ROLE_ID secret_id=$$WP_DB_SECRET_ID) &&
        export MARIADB_ROOT_PASSWORD=$$(vault kv get -field=MARIADB_ROOT_PASSWORD secret/wp-db) &&
        docker-entrypoint.sh mysqld
      "
    networks:
      - backend
      - vault-network
    healthcheck:
      test: ["CMD-SHELL", "ps -aux | grep -c mysqld > /dev/null"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    container_name: redis
    image: redis:7.0.12-alpine
    profiles: ["crypt", "core"]
    volumes:
      - redis-data:/data
    expose:
      - "6379"
    restart: unless-stopped
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: 128M
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  #######################
  # Application Services#
  #######################

  wp-app:
    build:
      context: ./dockerfiles/wp-app
      dockerfile: Dockerfile
    container_name: wp-app
    profiles: ["wp"]
    depends_on:
      wp-db:
        condition: service_healthy
    expose:
      - "80"
    restart: unless-stopped
    volumes:
      - wp-app-data:/var/www/html
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_DB_PATH=database/creds/wp-app
    env_file:
      - ./env/wp-app.env
      - ./env/.env.vault
    command: >
      /bin/sh -c "
        export VAULT_TOKEN=$$(vault write -field=token auth/approle/login role_id=$$WP_APP_ROLE_ID secret_id=$$WP_APP_SECRET_ID) &&
        DB_CREDS=$$(vault read -format=json database/creds/wp-app) &&
        export WORDPRESS_DB_USER=$$(echo $$DB_CREDS | jq -r '.data.username') &&
        export WORDPRESS_DB_PASSWORD=$$(echo $$DB_CREDS | jq -r '.data.password') &&
        export WORDPRESS_DB_HOST=wp-db &&
        export WORDPRESS_DB_NAME=wordpress &&
        apache2-foreground
      "
    networks:
      - backend
      - frontend
      - vault-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s

  privatebin:
    container_name: privatebin
    profiles: ["crypt", "core"]
    image: privatebin/nginx-fpm-alpine:1.5.1
    expose:
      - "8080"
    restart: unless-stopped
    volumes:
      - privatebin-data:/srv/data
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    env_file:
      - ./env/privatebin.env
    networks:
      - backend
      - frontend
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: 256M
    logging:
      options:
        max-size: "10m"
        max-file: "3"


  cryptletter:
    container_name: cryptletter
    image: scribblerockerz/cryptletter:3.1.4
    profiles: ["crypt", "core"]
    depends_on:
      redis:
        condition: service_healthy
    expose:
      - "8080"
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    env_file:
      - ./env/cryptletter.env
    networks:
      - backend
      - frontend
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: 256M
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  tg-proxy:
    build:
      context: ./dockerfiles/tg-proxy
      dockerfile: Dockerfile
    container_name: tg-proxy
    profiles: ["tg-proxy"]
    restart: unless-stopped
    ports:
      - "1488:443"
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    environment:
      - VAULT_ADDR=http://vault:8200
    env_file:
      - ./env/.env.vault
    # The following variable is fetched from Vault:
    # - SECRET
    command: >
      /bin/sh -c "
        export VAULT_TOKEN=$$(vault write -field=token auth/approle/login role_id=$$TG_PROXY_ROLE_ID secret_id=$$TG_PROXY_SECRET_ID) &&
        export SECRET=$$(vault kv get -field=SECRET secret/tg-proxy) &&
        ./run.sh
      "
    networks:
      - frontend
      - vault-network
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  gitea:
    container_name: gitea
    image: gitea/gitea:1.19.3
    profiles: ["gitea"]
    restart: always
    ports:
      - "228:22"
    volumes:
      - gitea-data:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - ./env/gitea.env
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - SETGID
      - SETUID
    networks:
      - frontend
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
    logging:
      options:
        max-size: "10m"
        max-file: "3"
  
  varnish:
    image: varnish:6.6
    container_name: varnish
    profiles: ["wp"]
    expose: 
      - "80"
    volumes:
      - ./dockerfiles/varnish/:/etc/varnish/
    environment:
      - VARNISH_BACKEND_HOST=wp-app
      - VARNISH_BACKEND_PORT=80
      - VIRTUAL_HOST=blog.mydadsarenot.gay
      - LETSENCRYPT_HOST=blog.mydadsarenot.gay
      - VIRTUAL_PORT=80
    depends_on:
      wp-app:
        condition: service_healthy
    restart: unless-stopped
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - SYS_ADMIN
      - CHOWN
      - SETUID
      - SETGID
    networks:
      - backend
      - frontend
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "varnishtest", "-q", "return (200)"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s

#######################
# Networks            #
#######################

networks:
  frontend:
  backend:
  standalone:
  vault-network:
    external: true
    name: vault-network

#######################
# Volumes             #
#######################

volumes:
  wp-app-data:
    name: wp-app-data
    labels:
      - "WordPress application data"
  wp-db-data:
    name: wp-db-data
    labels:
      - "WordPress database data"
  redis-data:
    name: redis-data
    labels:
      - "Backend DB for cryptletter"
  gitea-data:
    name: gitea-data
    labels:
      - "Gitea repository storage"
  privatebin-data:
    name: privatebin-data
    labels:
      - "Privatebin repository storage"
  html:
    name: nginx-proxy-html
  vhost:
    name: nginx-proxy-vhost
  certs:
    name: nginx-proxy-certs
